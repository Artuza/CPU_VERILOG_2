module logic(
    input [31:0] a,
    input [31:0] b,
    input [2:0] opcode,
    output reg [63:0] outlu,
    output reg za,
    output reg zb,
    output reg eq,
    output reg gt,
    output reg lt
);

    always @(a, b, opcode) begin
        case(opcode)
            3'b000: outlu = a & b;
            3'b001: outlu = a | b;
            3'b010: outlu = a ^ b;
            3'b011: outlu = ~(a | b);
            3'b100: outlu = a << 1;
            3'b101: outlu = a >> 1;
            3'b110: outlu = (a == b) ? 64'h0000000000000001 : 64'h0000000000000000;
            3'b111: outlu = (a < b) ? 64'h0000000000000001 : 64'h0000000000000000;
            default: outlu = 64'h0000000000000000;
        endcase

        za = (a == 32'h00000000);
        zb = (b == 32'h00000000);
        eq = (a == b);
        gt = (a > b);
        lt = (a < b);
    end
endmodule
